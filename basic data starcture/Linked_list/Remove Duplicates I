https://www.hackerrank.com/contests/mid-term-exam-a-basic-data-structures-a-batch-03/challenges/remove-duplicated-i/problem


code :

#include<bits/stdc++.h>
using namespace std;
class node
{
    public:
    int val;
    node * next;
    node (int val)
    {
        this->next= NULL;
        this->val= val;
    }
};
void take_in(node*& head, node*& tail, int val)
{
    node* newnode= new node(val);
    if(head== NULL)
    {
        head=newnode;
        tail=newnode;
        return;
    }
    else 
    {
        tail->next=newnode;
        tail=newnode;
    }
}
int size(node* head)
    {
        node*temp=head;
        int cnt=0;
        while (temp != NULL)
        {
            cnt++;
           temp=temp->next;
        }
        return cnt;
        
    }
void remove_duplicate(node *&head)
{
    node *temp = head;
    while (temp->next != NULL)
    {
        if(temp->val== temp->next->val)
        {
             temp->val= temp->next->val;
            node *del= temp->next;
           
            temp->next=temp->next->next;
            delete del;
        }
        else{
            temp= temp->next;
        }
        
    }
}
void  print(node*newhead)
{
node* temp=newhead;
while (temp != NULL)
    {
        cout<<temp->val<<" ";
        temp=temp->next;
    }
}
void sort(node *&head)
{
    node *temp=head;
   for(node *i= temp; i->next != NULL; i=i->next)
   {
    for (node *j=i->next; j!= NULL; j=j->next)
    {
        if(i->val > j->val)
        {
            swap(i->val, j->val);
        }
    }
    
   }
    
}
int main()
{
    node *head= NULL;
    node *tail= NULL;
    while (true)
    {
        int val; cin>> val;
        if(val== -1)
        {
            break;
        }
        take_in(head,  tail, val);
    }
    sort(head);
    remove_duplicate(head);
    print(head);
    return 0;
}
